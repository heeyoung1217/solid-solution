import os
from pymatgen.core import Structure

def save_structure_as_poscar(cif_file, output_directory):
    """
    CIF 파일을 읽어 구조를 가져와서 POSCAR 파일로 저장합니다.

    Args:
        cif_file: CIF 파일 경로
        output_directory: 출력 폴더 경로
    """

    # CIF 파일을 읽어 구조를 가져옵니다.
    structure = Structure.from_file(cif_file)

    # 구조의 순서를 확인하고, 순서가 없는 경우 순서를 지닌 구조로 변환합니다.
    if not structure.is_ordered:
        structure = structure.get_reduced_structure()

    # 구조를 저장할 폴더를 생성합니다.
    structure_folder = os.path.splitext(os.path.basename(cif_file))[0]
    structure_folder_path = os.path.join(output_directory, structure_folder)
    os.makedirs(structure_folder_path, exist_ok=True)

    # 구조 정보를 따로 저장합니다.
    structure_dict = structure.as_dict()

    # 원자의 종류와 수를 가져옵니다.
    species = []
    natoms = []
    for site in structure_dict["sites"]:
        if site["species"][0]["element"] not in species:
            species.append(site["species"][0]["element"])
            natoms.append(1)
        else:
            index = species.index(site["species"][0]["element"])
            natoms[index] += 1

    # POSCAR 파일로 구조를 저장합니다.
    poscar_file = os.path.join(structure_folder_path, "POSCAR")
    with open(poscar_file, "w") as f:
        f.write("Generated by pymatgen\n")
        f.write("1.0\n")
        f.write("{:.10f} {:.10f} {:.10f}\n".format(*structure_dict["lattice"]["matrix"][0]))
        f.write("{:.10f} {:.10f} {:.10f}\n".format(*structure_dict["lattice"]["matrix"][1]))
        f.write("{:.10f} {:.10f} {:.10f}\n".format(*structure_dict["lattice"]["matrix"][2]))
        f.write(" ".join(species) + "\n")
        f.write(" ".join(map(str, natoms)) + "\n")
        f.write("Direct\n")
        for site in structure_dict["sites"]:
            f.write("{:.10f} {:.10f} {:.10f}\n".format(*site["abc"]))

# Solid solution 폴더에 있는 CIF 파일들을 읽어와서 POSCAR 파일로 구조를 저장합니다.
solid_solution_directory = "solid_solution"  # Solid solution 폴더 경로
output_directory = "POSCAR_solidsolution"  # 출력 폴더 경로
os.makedirs(output_directory, exist_ok=True)
cif_files = [f for f in os.listdir(solid_solution_directory) if f.endswith(".cif")]
for cif_file in cif_files:
    cif_path = os.path.join(solid_solution_directory, cif_file)
    save_structure_as_poscar(cif_path, output_directory)